#!/bin/bash
# The MIT License (MIT)
#
# Copyright (c) 2014 Gluu
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


### BEGIN INIT INFO
# Provides:          gluu-server
# Required-Start:       $all
# Required-Stop:        $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: This shell script takes care of starting and stopping 
#		     gluu-server (the Gluu Chroot Server)
# Description:       Gluu server chroot environment.
#                    
#                   
### END INIT INFO


PATH=/sbin:/usr/sbin:/bin:/usr/bin

. /lib/init/vars.sh
. /lib/lsb/init-functions

CHROOT_DIR=/opt/gluu-server-2.4.4
PIDFILE=$CHROOT_DIR/var/run/gluu-server-2.4.4.pid
RESOLV_CONF="/run/resolvconf/resolv.conf"

start() {
	PORTS=`netstat -tunpl | awk '{ print $4 }' |grep -Eohw '80|443|8080|8009|8005|1389|1689|4444'`
	STAT=(`df -aP |grep \/opt\/gluu-server-2.4.4\/ | awk '{ print $6 }' | grep -Eohw 'proc|lo|pts|modules|dev'`)

	if [ -f $PIDFILE ] && [ ${#STAT[@]} = "6" ]; then
		PID=`cat $PIDFILE`
                echo "gluu-server-2.4.4 is already running"
                exit 2;
        elif [ -f $PIDFILE ] || [ "$STAT" != "" ]; then
	
	echo -e "ERROR: Can't start gluu server.\nHINT: Please manually remove $PIDFILE and unmount chroot container by running\nrm -f $PIDFILE\ndf -aP | grep gluu-server-2.4.4 | awk '{print \$6}' | xargs -I {} umount -l {}"
	elif [ "$PORTS" != "" ]; then
		echo "Port address(es) $PORTS already in use,"
		echo "Please stop the service(s) listening on one of $PORTS ports and execute /etc/init.d/gluu-server-2.4.4 start"
		exit 2;
	else
 		echo "Starting Gluu server24, please wait..."    	

                if [ -f $RESOLV_CONF ]; then
                        cp --parents -f $RESOLV_CONF /opt/gluu-server-2.4.4/
                fi
	
		/bin/mount /dev                    /opt/gluu-server-2.4.4/dev -o bind \
		&& /bin/mount /proc                   /opt/gluu-server-2.4.4/proc -t proc -o defaults,noatime \
		&& /bin/mount /sys/class/net/lo       /opt/gluu-server-2.4.4/sys/class/net/lo -t sysfs -o defaults \
		&& /bin/mount /lib/modules            /opt/gluu-server-2.4.4/lib/modules -o bind \
		&& /bin/mount /dev/pts                /opt/gluu-server-2.4.4/dev/pts -t devpts -o gid=5,mode=620 \
                && /usr/sbin/chroot /opt/gluu-server-2.4.4 su - root -c '/bin/hostname -b -F /etc/hostname' > /dev/null 2>&1
        	sleep 2
                /usr/sbin/chroot /opt/gluu-server-2.4.4 su - root -c '/etc/init.d/rc 3' > /dev/null 2>&1 \
		&& echo "started" > $PIDFILE  || failure $"Chroot start"
                RETVAL=$?
                echo
                [ $RETVAL -eq 0 ] && touch /var/lock/gluu-server-2.4.4
                return $RETVAL
        fi

}

stop() {

STAT=(`df -aP |grep \/opt\/gluu-server-2.4.4\/ | awk '{ print $6 }' | grep -Eohw 'proc|lo|pts|modules|dev'`)

        if [ ! -f $PIDFILE ] && [ "$STAT" = "" ]; then

                echo "gluu-server-2.4.4 is not running"
                exit 0;

        elif [ -f $PIDFILE ] && [ ${#STAT[*]} = 6 ]; then

        echo "Shutting down Gluu Server..."

        else

        echo -e "ERROR: Can't stop gluu server.\nHINT: Please manually remove $PIDFILE and unmount chroot container by running\nrm -f $PIDFILE\ndf -aP | grep gluu-server-2.4.4 | awk '{print \$6}' | xargs -I {} umount -l {}" 

        exit 2

        fi


        if [ -x /opt/gluu-server-2.4.4/etc/init.d/apache2 ] && [ "`ps aux | grep apache2 | grep -v grep`"  != "" ]; then
             echo "Stopping Apache..."
            /usr/sbin/chroot /opt/gluu-server-2.4.4 su - root -c 'service apache2 stop' > /dev/null 2>&1
                if [ "`ps aux | grep apache2 | grep -v grep`"  != "" ]; then
                   echo "Failed"
                else
                   echo "OK"    
                fi

        fi

        if [ -x /opt/gluu-server-2.4.4/etc/init.d/tomcat ] && [ "`ps aux | grep tomcat | grep -v grep`"  != "" ]; then
             echo "Stopping Tomcat..."
            /usr/sbin/chroot /opt/gluu-server-2.4.4 su - root -c 'service tomcat stop' > /dev/null 2>&1
                if [ "`ps aux | grep tomcat | grep -v grep`"  != "" ]; then
                   echo "Failed"
                else
                   echo "OK"    
                fi

        fi

        if [ -x /opt/gluu-server-2.4.4/etc/init.d/oxd ] && [ "`ps aux | grep oxd-server | grep -v grep`"  != "" ]; then
             echo "Stopping oxd-server..."
            /usr/sbin/chroot /opt/gluu-server-2.4.4 su - root -c 'service oxd stop' > /dev/null 2>&1
                if [ "`ps aux | grep oxd-server | grep -v grep`"  != "" ]; then
                   echo "Failed"
                else
                   echo "OK"    
                fi

        fi

        if [ -x /opt/gluu-server-2.4.4/etc/init.d/memcached ] && [ "`ps aux | grep memcached | grep -v grep`"  != "" ]; then
             echo "Stopping Memcached..."
            /usr/sbin/chroot /opt/gluu-server-2.4.4 su - root -c 'service memcached stop' > /dev/null 2>&1
                if [ "`ps aux | grep memcached | grep -v grep`"  != "" ]; then
                   echo "Failed"
                else
                   echo "OK"    
                fi

        fi

        if [ -x /opt/gluu-server-2.4.4/etc/init.d/opendj ] && [ "`ps aux | grep opendj | grep -v grep`"  != "" ]; then
             echo "Stopping OpendDJ..."
            /usr/sbin/chroot /opt/gluu-server-2.4.4 su - root -c 'service opendj stop' > /dev/null 2>&1
                sleep 5
                if [ "`ps aux | grep opendj | grep -v grep`"  != "" ]; then
                   echo "Failed"
                else
                   echo "OK"    
                fi

        fi



	   /bin/umount -l /opt/gluu-server-2.4.4/proc \
	&& /bin/umount -l /opt/gluu-server-2.4.4/sys/class/net/lo \
	&& /bin/umount -l /opt/gluu-server-2.4.4/lib/modules \
	&& /bin/umount -l /opt/gluu-server-2.4.4/dev/pts \
	&& /bin/umount -l /opt/gluu-server-2.4.4/dev \
	&& rm -f /var/lock/gluu-server-2.4.4 $PIDFILE || failure $"Chroot stop"
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f /var/lock/gluu-server-2.4.4
        echo
        return $RETVAL
}


status() {

STAT=(`df -aP |grep \/opt\/gluu-server-2.4.4\/ | awk '{ print $6 }' | grep -Eohw 'proc|lo|pts|modules|dev'`)
        if [ -f $PIDFILE ] && [ ${#STAT[@]} = "6" ];then
                PID=`cat $PIDFILE`
                echo gluu-server-2.4.4 is running: $PID
                exit 2
        elif [ ! -f $PIDFILE ] && [ ${#STAT[@]} = "0" ];then
                echo "gluu-server-2.4.4 is not running"

        else
		echo -e "ERROR: gluu server was not run properly.\nHINT: Please manually remove $PIDFILE and unmount chroot container by running\nrm -f $PIDFILE\ndf -aP | grep gluu-server-2.4.4 | awk '{print \$6}' | xargs -I {} umount -l {}"
                

       fi

}

login() {
	STAT=(`df -aP |grep \/opt\/gluu-server-2.4.4\/ | awk '{ print $6 }' | grep -Eohw 'proc|lo|pts|modules|dev'`)

	if [ -f $PIDFILE ] && [ ${#STAT[@]} = "6" ];then

                echo gluu-server-2.4.4 is running...
                echo logging in...
                /usr/sbin/chroot /opt/gluu-server-2.4.4/ su -
        else
                echo "gluu-server-2.4.4 is not running"
                echo "please start it and run /etc/init.d/gluu-server-2.4.4 start" 

       fi

}

ready() {
	PORTS=`netstat -tunpl | awk '{ print $4 }' |grep -Eohw '80|443|8080|8009|8005|1389|1689|4444'`
	STAT=(`df -aP |grep \/opt\/gluu-server-2.4.4\/ | awk '{ print $6 }' | grep -Eohw 'proc|lo|pts|modules|dev'`)
   
        if [ -f $PIDFILE ] && [ ${#STAT[@]} = "6" ]; then
        PID=`cat $PIDFILE`
                return 1;
        elif [ -f $PIDFILE ] || [ "$STAT" != "" ]; then
            return 1;
        elif [ "$PORTS" != "" ]; then
            return 1;
	fi 
        return 0;
}
 
wait_stop() {
    end=$((SECONDS+30))
 
    while [ $SECONDS -lt $end ]; do
        ready
        STAT=$?
        if [ $STAT = 0 ]; then
            return 0;
        fi
        sleep 5
    done
 
    return 1;
}


case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop
	wait_stop
        start
        ;;
    login)
	login
	;;
    ready)
	;;
    *)

        echo "Usage:  {start|stop|status|restart|login|ready}"
        exit 1
        ;;
esac
exit $?
